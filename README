# Orchestration Layer

#### for other `local-docker` repos

The provided configuration is a comprehensive .env file template for your system. Here’s a detailed breakdown and key considerations for its use:

Purpose

	•	Centralized Configuration:
	•	Manages environment variables for the RTMP server, event broker, and transcription services.
	•	Simplifies deployments across different environments (development, staging, production).
	•	Security Best Practices:
	•	Credentials are parameterized (e.g., RabbitMQ, Twitch API) and can be securely managed using Docker secrets or encrypted storage in production.

Configuration Breakdown

1. NAS Configuration

NAS_IP_OR_HOSTNAME=192.168.0.19         # IP address or hostname of the NAS
NAS_SHARE_NAME=volume1/videos           # NAS share path for storing video recordings
NAS_USERNAME=                           # Optional NAS username for authentication
NAS_PASSWORD=                           # Optional NAS password for authentication

	•	Purpose: Defines NAS parameters for recording video streams.
	•	Use Case: Mount NAS volumes in the docker-compose.yml to store video recordings persistently.

2. Social Media Stream Variables

VIDEO_ID=                               # YouTube video ID for live stream
STREAM_KEY=                             # Facebook Live stream key
TWITCH_CHANNEL_NAME=cdaproductions      # Twitch channel name

	•	Purpose: Configures live streaming to YouTube, Facebook, and Twitch.
	•	Use Case: Used in the RTMP server to dynamically push streams to social media platforms.

3. Twitch API Credentials

TWITCH_CLIENT_ID=                       # Required if generating access tokens manually
TWITCH_CLIENT_SECRET=                   # Required if generating access tokens manually

	•	Optional: Needed if you plan to dynamically generate Twitch access tokens for managing streams.

4. Deployment Environment

ENVIRONMENT=development                 # Options: development, staging, production

	•	Purpose: Differentiates configurations for different deployment environments.

5. Additional Configuration

TZ=UTC                                  # Sets timezone for the containers
NGINX_WORKER_PROCESSES=auto             # Nginx worker process configuration
NGINX_WORKER_CONNECTIONS=2048           # Nginx worker connection limit
MAX_SEGMENT_DURATION=6                  # HLS segment duration in seconds

	•	Purpose: Optimizes the RTMP server configuration.

6. RabbitMQ Credentials

RABBITMQ_DEFAULT_USER=your_rabbitmq_username
RABBITMQ_DEFAULT_PASS=your_rabbitmq_password

	•	Purpose: Configures RabbitMQ for event-driven communication between services.

Integration with Docker

Example Usage in docker-compose.yml

Reference these variables in the docker-compose.yml file:

services:
  rtmp-service:
    environment:
      - NAS_IP_OR_HOSTNAME=${NAS_IP_OR_HOSTNAME}
      - NAS_SHARE_NAME=${NAS_SHARE_NAME}
      - VIDEO_ID=${VIDEO_ID}
      - STREAM_KEY=${STREAM_KEY}
      - TWITCH_CHANNEL_NAME=${TWITCH_CHANNEL_NAME}
      - TZ=${TZ}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}

Security Considerations

	1.	Sensitive Data:
	•	Keep NAS_USERNAME, NAS_PASSWORD, RABBITMQ_DEFAULT_USER, and RABBITMQ_DEFAULT_PASS blank in the template.
	•	Use Docker secrets or encrypted storage for these values in production:

echo "your_secret" | docker secret create rabbitmq_pass -


	2.	Environment-Specific Files:
	•	Maintain separate .env files for development, staging, and production.
	3.	Access Control:
	•	Restrict access to the .env file. Use .gitignore to ensure it’s not accidentally committed to your repository.

Next Steps

	1.	Populate the .env File:
	•	Update placeholders with actual values for your setup.
	2.	Test the Configuration:
	•	Run your services using the updated docker-compose.yml:

docker-compose --env-file .env up --build


	3.	Document Secure Practices:
	•	Include a note in your README or repo about managing sensitive variables securely.

Let me know if you need further assistance integrating this .env configuration into your workflow!